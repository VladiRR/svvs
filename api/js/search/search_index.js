var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.614,1,1.614]],["body/controllers/AppController.html",[0,2.851,1,2.46,2,2.667,3,0.65,4,0.554,5,0.554,6,2.667,7,0.554,8,4.214,9,2.46,10,2.46,11,2.861,12,0.65,13,1.444,14,4.884,15,1.931,16,0.051,17,0.994,18,3.308,19,1.394,20,4.638,21,2.061,22,1.134,23,4.214,24,0.65,25,0.755,26,0.65,27,0.302,28,3.308,29,0.038,30,0.038]],["title/modules/AppModule.html",[31,1.229,32,1.614]],["body/modules/AppModule.html",[1,2.508,2,3.066,3,0.556,4,0.473,5,0.473,7,0.473,9,2.219,10,2.219,11,2.581,16,0.05,24,1.022,25,0.645,26,0.556,27,0.258,29,0.035,30,0.035,31,2.042,32,2.994,33,1.256,34,1.689,35,2.279,36,2.279,37,2.507,38,2.194,39,2.219,40,1.65,41,1.435,42,2.826,43,3.802,44,2.581,45,2.279,46,1.65,47,2.826,48,1.435,49,1.65,50,1.65,51,2.826,52,2.279,53,1.303,54,2.279,55,2.581,56,2.826,57,2.826,58,2.826,59,2.826,60,2.826,61,2.826,62,2.826,63,1.435,64,1.919,65,3.802,66,2.826,67,1.919,68,2.826]],["title/modules/AuthModule.html",[31,1.229,37,1.404]],["body/modules/AuthModule.html",[3,0.515,4,0.438,5,0.438,7,0.438,16,0.05,24,1.005,25,0.597,26,0.515,27,0.239,29,0.033,30,0.033,31,1.978,33,1.164,34,1.604,37,2.695,38,2.145,39,2.107,40,1.528,41,1.329,44,2.45,49,1.528,50,1.528,52,2.112,69,2.112,70,2.112,71,2.618,72,2.112,73,2.342,74,2.45,75,2.145,76,2.618,77,3.609,78,2.911,79,2.911,80,3.609,81,2.911,82,2.911,83,3.609,84,1.528,85,2.618,86,1.778,87,2.112,88,2.618,89,2.618,90,2.107,91,2.618,92,2.618,93,2.618,94,1.528,95,2.618,96,2.618,97,2.112,98,2.618,99,2.112,100,2.618]],["title/classes/AuthResolver.html",[27,0.253,90,1.614]],["body/classes/AuthResolver.html",[3,0.444,4,0.378,5,0.378,7,0.638,12,0.444,13,1.115,15,1.898,16,0.051,17,1.145,19,1.253,22,1.115,24,0.82,26,0.444,27,0.206,29,0.03,30,0.03,48,1.147,63,2.116,67,1.533,73,2.197,87,1.821,90,2.686,101,1.318,102,1.821,103,2.623,104,3.252,105,3.824,106,2.336,107,3.563,108,4.601,109,1.147,110,2.259,111,2.259,112,1.898,113,1.269,114,0.977,115,0.87,116,1.115,117,2.208,118,1.445,119,2.623,120,1.821,121,3.362,122,3.252,123,2.259,124,3.362,125,3.073,126,3.252,127,3.252,128,2.208,129,2.623,130,3.252,131,2.433,132,3.252,133,2.259,134,1.821,135,1.821,136,1.533,137,2.208,138,2.259,139,2.259,140,1.269,141,2.259,142,1.318,143,1.318,144,2.259]],["title/injectables/AuthService.html",[73,1.229,145,0.631]],["body/injectables/AuthService.html",[3,0.34,4,0.29,5,0.29,7,0.545,12,0.34,13,0.914,16,0.051,17,0.978,19,1.306,21,1.853,22,0.914,24,0.854,25,0.395,26,0.34,27,0.158,29,0.024,30,0.024,49,1.011,50,1.011,53,0.594,54,1.397,73,1.853,75,2.089,86,1.176,94,1.557,99,1.397,106,2.117,107,2.948,109,1.355,112,1.557,113,1.27,114,0.978,115,0.743,116,1.115,117,2.482,118,2.045,119,2.948,120,2.152,121,2.948,125,2.152,128,2.482,131,2.134,135,1.397,136,1.176,140,1.627,142,1.9,143,1.9,145,0.609,146,0.77,147,1.397,148,3.254,149,1.732,150,4.603,151,1.834,152,1.732,153,2.832,154,2.832,155,1.811,156,1.811,157,2.152,158,1.557,159,1.732,160,2.668,161,1.732,162,3.656,163,1.732,164,1.811,165,1.856,166,2.668,167,1.732,168,1.732,169,1.9,170,2.134,171,1.732,172,2.668,173,1.732,174,2.668,175,1.397,176,1.732,177,1.176,178,1.732,179,1.732,180,1.732,181,1.732,182,1.557,183,1.397,184,1.732,185,1.397,186,2.668,187,1.732,188,1.732,189,1.732,190,1.176]],["title/injectables/GqlAuthGuard.html",[145,0.631,191,1.614]],["body/injectables/GqlAuthGuard.html",[3,0.589,4,0.501,5,0.501,7,0.501,12,0.589,13,1.354,16,0.051,17,0.9,19,1.329,22,1.026,24,0.869,25,0.683,26,0.589,27,0.274,29,0.036,30,0.036,48,1.52,64,2.683,84,1.748,113,1.168,114,0.9,115,0.683,116,1.026,140,1.168,145,0.902,146,1.331,170,1.748,191,2.745,192,3.186,193,2.415,194,3.951,195,4.888,196,4.702,197,3.951,198,4.702,199,3.951,200,4.049,201,2.995,202,2.995,203,2.415,204,2.995,205,2.415,206,2.995,207,2.995]],["title/injectables/JwtStrategy.html",[74,1.404,145,0.631]],["body/injectables/JwtStrategy.html",[3,0.528,4,0.449,5,0.449,7,0.449,12,0.528,13,1.542,16,0.05,17,1.103,19,1.416,22,0.92,24,0.884,25,0.612,26,0.528,27,0.245,29,0.034,30,0.034,49,1.567,50,1.567,74,1.864,84,1.567,94,2.442,97,2.165,106,2.124,109,2.124,113,1.047,114,0.807,115,0.612,116,0.92,117,3.302,128,3.054,140,1.047,145,0.838,146,1.193,153,2.493,154,2.493,165,1.363,175,2.165,183,2.961,185,2.165,203,2.165,208,2.165,209,3.671,210,3.374,211,2.684,212,2.493,213,4.184,214,3.671,215,2.684,216,1.822,217,2.684,218,2.684,219,2.684,220,2.684,221,2.684,222,2.684,223,2.684,224,2.684,225,2.684,226,2.684,227,2.684,228,2.684,229,2.684,230,2.684,231,2.684,232,2.684,233,2.684]],["title/injectables/PasswordService.html",[75,1.229,145,0.631]],["body/injectables/PasswordService.html",[3,0.465,4,0.396,5,0.396,7,0.655,12,0.465,13,1.459,16,0.051,17,1.175,19,1.28,21,2.221,22,1.152,24,0.661,25,0.54,26,0.465,27,0.216,29,0.031,30,0.031,75,1.493,113,1.311,114,1.01,115,0.892,116,1.152,131,2.485,140,1.525,145,0.767,146,1.051,156,2.654,157,3.627,158,3.106,169,2.282,212,2.282,234,1.907,235,2.71,236,3.91,237,3.361,238,3.361,239,3.361,240,4.497,241,2.365,242,4.673,243,4.807,244,3.361,245,2.365,246,1.606,247,1.606,248,1.606,249,3.361,250,2.365,251,3.361,252,3.361,253,3.361,254,3.361,255,2.365,256,2.365,257,2.365]],["title/classes/UserEntity.html",[27,0.253,53,0.948]],["body/classes/UserEntity.html",[3,0.339,4,0.289,5,0.289,7,0.543,12,0.339,15,2.616,16,0.051,17,1.347,21,2.207,24,0.523,26,0.339,27,0.158,29,0.024,30,0.024,53,0.912,67,3.188,101,1.007,114,0.518,115,1.049,116,1.25,118,2.207,129,2.145,136,1.171,153,1.806,155,2.477,158,2.301,164,2.676,165,2.334,190,2.676,212,1.806,235,2.145,246,1.806,247,1.806,248,1.806,258,1.391,259,2.66,260,2.145,261,3.246,262,3.246,263,3.246,264,3.941,265,3.941,266,3.246,267,3.246,268,1.725,269,2.66,270,2.942,271,4.164,272,4.481,273,1.725,274,2.66,275,2.66,276,2.66,277,2.66,278,4.695,279,2.66,280,3.246,281,1.725,282,2.145,283,2.66,284,3.648,285,3.246,286,1.725,287,2.66,288,2.942,289,2.66,290,1.725,291,1.725,292,1.725,293,3.246,294,1.725,295,2.66,296,1.725,297,1.171,298,2.66]],["title/classes/UserResolver.html",[27,0.253,299,1.614]],["body/classes/UserResolver.html",[3,0.491,4,0.418,5,0.418,7,0.674,12,0.491,13,1.196,15,1.457,16,0.05,17,1.049,19,0.75,22,0.855,24,0.935,25,0.57,26,0.491,27,0.228,29,0.032,30,0.032,48,1.267,53,1.494,63,1.772,101,1.457,103,2.815,105,3.701,106,2.044,109,1.772,112,2.038,113,1.362,114,1.049,115,0.797,116,1.196,118,2.249,124,2.815,134,2.013,140,1.362,142,1.457,143,1.457,151,1.974,169,1.457,191,1.457,216,1.695,299,2.776,300,2.013,301,3.491,302,3.491,303,2.496,304,2.496,305,2.815,306,3.516,307,2.496,308,2.496,309,2.496,310,2.815,311,2.815,312,3.491,313,2.496,314,2.013,315,1.695,316,2.496,317,1.695,318,2.496,319,2.496,320,2.496,321,2.496,322,2.496,323,2.496,324,2.496]],["title/injectables/UserService.html",[145,0.631,151,1.079]],["body/injectables/UserService.html",[3,0.371,4,0.316,5,0.316,7,0.477,12,0.371,13,0.977,16,0.051,17,1.234,19,1.149,21,1.526,22,1.31,24,0.752,25,0.431,26,0.371,27,0.173,29,0.026,30,0.026,46,1.103,53,0.647,106,2.513,109,1.447,112,1.664,113,1.492,114,1.149,115,0.873,116,1.31,118,2.2,131,2.691,140,1.492,142,1.103,143,2.232,145,0.65,146,0.839,151,1.683,164,2.331,165,1.941,169,1.103,170,1.664,177,1.935,182,2.232,190,2.596,246,2.331,297,1.283,305,3.992,306,4.173,310,2.299,311,2.299,317,1.283,325,1.523,326,3.824,327,2.851,328,2.851,329,2.851,330,1.889,331,3.084,332,1.889,333,2.851,334,3.433,335,1.889,336,1.889,337,2.851,338,1.889,339,2.851,340,1.889,341,1.889,342,1.889,343,1.889,344,1.889,345,1.889,346,1.889,347,1.523,348,1.889,349,1.889,350,1.889,351,1.889]],["title/modules/UsersModule.html",[31,1.229,38,1.229]],["body/modules/UsersModule.html",[3,0.606,4,0.516,5,0.516,7,0.516,16,0.049,24,0.97,25,0.703,26,0.606,27,0.282,29,0.037,30,0.037,31,2.113,33,1.369,34,1.789,38,2.291,39,2.35,40,1.798,41,1.564,44,2.092,45,2.485,46,1.798,53,1.056,78,3.247,79,3.247,81,3.247,82,3.247,118,2.113,151,2.11,155,2.733,299,2.35,314,2.485,317,2.092,352,2.485,353,2.485,354,2.485,355,3.081,356,3.081,357,3.081]],["title/coverage.html",[358,3.021]],["body/coverage.html",[0,1.748,1,1.748,5,0.501,6,2.415,16,0.05,27,0.404,29,0.036,30,0.036,53,1.026,55,2.033,73,1.331,74,1.52,75,1.331,90,1.748,102,2.415,115,0.683,137,2.033,145,1.115,147,2.415,151,1.168,182,1.748,191,1.748,192,2.415,193,2.415,208,2.415,234,2.415,258,2.415,260,2.415,282,2.415,299,1.748,300,2.415,315,2.033,325,2.415,358,2.415,359,2.033,360,2.995,361,5.415,362,3.951,363,2.415,364,4.422,365,4.702,366,2.415,367,4.422,368,3.951,369,2.415,370,2.995,371,2.995,372,2.415,373,2.995,374,2.033,375,2.995]],["title/dependencies.html",[34,1.474,376,2.322]],["body/dependencies.html",[16,0.051,25,0.55,29,0.031,30,0.031,34,1.072,46,1.408,48,1.224,63,2.006,84,1.408,86,1.637,94,1.408,115,0.55,156,1.637,210,2.748,297,1.637,374,2.314,377,2.412,378,5.147,379,2.412,380,2.412,381,2.412,382,2.412,383,2.412,384,2.412,385,2.412,386,2.412,387,3.952,388,2.748,389,2.412,390,3.408,391,2.412,392,2.412,393,2.412,394,3.952,395,2.412,396,2.412,397,2.412,398,3.408,399,2.412,400,3.187,401,2.412,402,2.412,403,2.412,404,2.412,405,3.408,406,4.531,407,2.412,408,2.412,409,2.412,410,2.412,411,2.412,412,2.412,413,2.412,414,2.412,415,2.412,416,3.408,417,2.412,418,2.412,419,2.412,420,2.412,421,2.412,422,2.412,423,2.412,424,2.412,425,2.412,426,2.412,427,1.945,428,2.412,429,2.412,430,2.412,431,2.412,432,2.412,433,2.412,434,2.412,435,2.412,436,2.412,437,2.412,438,2.412,439,2.412,440,2.412,441,2.412,442,2.412,443,2.412,444,2.412,445,2.412,446,2.412]],["title/miscellaneous/functions.html",[447,1.356,448,2.675]],["body/miscellaneous/functions.html",[9,2.383,10,2.383,11,2.771,12,0.802,16,0.044,29,0.044,30,0.044,372,3.292,374,3.565,447,2.383,448,3.292,449,4.082]],["title/index.html",[12,0.457,450,1.873,451,1.873]],["body/index.html",[4,0.593,9,2.568,10,2.793,16,0.049,29,0.04,30,0.04,63,2.233,154,2.404,288,2.855,331,2.855,359,2.404,452,3.541,453,3.541,454,3.541,455,3.541,456,3.541,457,3.541,458,4.399,459,3.541,460,4.399,461,3.541,462,4.399,463,3.541,464,3.541,465,3.541,466,3.541,467,3.541,468,3.541,469,3.541,470,3.541,471,4.399,472,2.855,473,3.541]],["title/license.html",[450,1.873,451,1.873,474,1.873]],["body/license.html",[16,0.036,29,0.036,30,0.036,41,1.494,359,1.998,400,2.373,474,2.373,475,2.943,476,4.384,477,2.943,478,2.943,479,2.943,480,3.906,481,2.943,482,2.943,483,2.943,484,2.943,485,2.943,486,2.943,487,3.906,488,5.24,489,2.943,490,2.943,491,2.943,492,4.384,493,2.943,494,3.906,495,2.943,496,2.943,497,3.906,498,2.943,499,2.943,500,2.943,501,2.943,502,2.943,503,2.943,504,2.943,505,3.906,506,2.943,507,2.943,508,2.943,509,2.943,510,2.943,511,2.943,512,2.943,513,3.906,514,3.906,515,2.943,516,2.943,517,2.943,518,2.943,519,2.943,520,2.943,521,2.943,522,2.943,523,2.943,524,2.943,525,2.943,526,2.943,527,2.943,528,2.943,529,2.943,530,2.943,531,2.943,532,2.943,533,2.943,534,2.943,535,2.943,536,2.943,537,2.943,538,2.943,539,2.943,540,2.943,541,2.943,542,2.943,543,2.943,544,2.943]],["title/modules.html",[33,1.665]],["body/modules.html",[16,0.043,29,0.043,30,0.043,32,2.338,33,1.78,37,2.033,38,1.78,388,4.072,545,5.049,546,5.049,547,5.049]],["title/overview.html",[548,3.021]],["body/overview.html",[0,1.818,16,0.049,29,0.037,30,0.037,32,2.962,33,1.384,34,1.802,35,2.512,36,2.512,37,2.75,38,2.297,39,2.367,40,1.818,41,1.581,69,2.512,70,2.512,72,2.512,73,2.297,74,2.288,75,2.003,101,1.818,146,1.384,151,2.016,347,2.512,352,2.512,353,2.512,354,2.512,548,2.512,549,4.054,550,3.115]],["title/miscellaneous/variables.html",[447,1.356,551,2.675]],["body/miscellaneous/variables.html",[7,0.452,12,0.531,16,0.051,19,1.465,21,1.638,29,0.034,30,0.034,55,2.503,64,1.834,114,0.812,115,0.958,137,2.503,158,2.152,165,1.872,170,1.577,177,1.834,182,2.45,200,3.637,205,3.385,216,2.503,247,2.85,248,3.308,270,3.807,315,2.503,363,2.178,366,2.178,369,2.178,427,2.973,447,1.577,472,2.973,551,2.178,552,2.701,553,2.701,554,2.701,555,3.687,556,2.701,557,2.701,558,2.701,559,2.701,560,3.687,561,2.701,562,2.701,563,2.701,564,2.701,565,2.701,566,2.701,567,2.701,568,2.701,569,2.701,570,2.701,571,2.701,572,2.701,573,2.701,574,2.701,575,2.701,576,2.701,577,2.701,578,2.701,579,2.701]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0.1.13",{"_index":435,"title":{},"body":{"dependencies.html":{}}}],["0.11.4",{"_index":446,"title":{},"body":{"dependencies.html":{}}}],["0.2.31",{"_index":440,"title":{},"body":{"dependencies.html":{}}}],["0.3.2",{"_index":428,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":429,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":347,"title":{},"body":{"injectables/UserService.html":{},"overview.html":{}}}],["1.0.0",{"_index":444,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":365,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":249,"title":{},"body":{"injectables/PasswordService.html":{}}}],["100",{"_index":361,"title":{},"body":{"coverage.html":{}}}],["11.0.0",{"_index":385,"title":{},"body":{"dependencies.html":{}}}],["11.2.1",{"_index":413,"title":{},"body":{"dependencies.html":{}}}],["12.10.0",{"_index":415,"title":{},"body":{"dependencies.html":{}}}],["12.2.9",{"_index":378,"title":{},"body":{"dependencies.html":{}}}],["12.4.0",{"_index":406,"title":{},"body":{"dependencies.html":{}}}],["15.5.0",{"_index":424,"title":{},"body":{"dependencies.html":{}}}],["2.0.0",{"_index":439,"title":{},"body":{"dependencies.html":{}}}],["2.21.0",{"_index":419,"title":{},"body":{"dependencies.html":{}}}],["2.4.0",{"_index":418,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":362,"title":{},"body":{"coverage.html":{}}}],["2021",{"_index":478,"title":{},"body":{"license.html":{}}}],["3",{"_index":549,"title":{},"body":{"overview.html":{}}}],["3.3.12",{"_index":393,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":368,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":430,"title":{},"body":{"dependencies.html":{}}}],["4.15.2",{"_index":423,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":367,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":550,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":421,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":420,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":284,"title":{},"body":{"classes/UserEntity.html":{}}}],["6.6.3",{"_index":437,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":371,"title":{},"body":{"coverage.html":{}}}],["7.0.0",{"_index":394,"title":{},"body":{"dependencies.html":{}}}],["7.0.4",{"_index":426,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":398,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":397,"title":{},"body":{"dependencies.html":{}}}],["7.9.10",{"_index":396,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":432,"title":{},"body":{"dependencies.html":{}}}],["9.0.2",{"_index":403,"title":{},"body":{"dependencies.html":{}}}],["9/9",{"_index":370,"title":{},"body":{"coverage.html":{}}}],["above",{"_index":512,"title":{},"body":{"license.html":{}}}],["access",{"_index":129,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserEntity.html":{}}}],["accesstoken",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":538,"title":{},"body":{"license.html":{}}}],["admin",{"_index":473,"title":{},"body":{"index.html":{}}}],["always",{"_index":571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["and/or",{"_index":503,"title":{},"body":{"license.html":{}}}],["angular",{"_index":417,"title":{},"body":{"dependencies.html":{}}}],["angular/animations",{"_index":377,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":379,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":380,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":381,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":382,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":383,"title":{},"body":{"dependencies.html":{}}}],["angular/localize",{"_index":384,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":386,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":387,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":391,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["apollo",{"_index":416,"title":{},"body":{"dependencies.html":{}}}],["apollo/client",{"_index":392,"title":{},"body":{"dependencies.html":{}}}],["app",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["app.controller",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["app.resolver",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":458,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":32,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps/.../app.resolver.ts",{"_index":553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.decorator.ts",{"_index":554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":449,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apps/.../user.decorator.ts",{"_index":552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/app.controller.ts:13",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["apps/backend/api/src/app/app.module.ts",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/backend/api/src/app/app.resolver.ts",{"_index":363,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/auth/auth.module.ts",{"_index":76,"title":{},"body":{"modules/AuthModule.html":{}}}],["apps/backend/api/src/app/auth/decorators/auth.decorator.ts",{"_index":366,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts",{"_index":102,"title":{},"body":{"classes/AuthResolver.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:15",{"_index":111,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:29",{"_index":123,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:39",{"_index":133,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts:18",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts:38",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts:61",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/backend/api/src/app/auth/services/jwt.strategy.ts",{"_index":208,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/services/jwt.strategy.ts:12",{"_index":211,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/backend/api/src/app/auth/services/jwt.strategy.ts:29",{"_index":215,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts",{"_index":234,"title":{},"body":{"injectables/PasswordService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts:13",{"_index":250,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts:19",{"_index":245,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts:28",{"_index":241,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/backend/api/src/app/users/decorators/user.decorator.ts",{"_index":369,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts",{"_index":258,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:22",{"_index":281,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:28",{"_index":268,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:34",{"_index":294,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:43",{"_index":273,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:49",{"_index":292,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:55",{"_index":290,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:65",{"_index":296,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:75",{"_index":286,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/guards/gql.auth",{"_index":192,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/resolvers/user.resolver.ts",{"_index":300,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/resolvers/user.resolver.ts:13",{"_index":304,"title":{},"body":{"classes/UserResolver.html":{}}}],["apps/backend/api/src/app/users/resolvers/user.resolver.ts:31",{"_index":309,"title":{},"body":{"classes/UserResolver.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts",{"_index":325,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:12",{"_index":332,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:27",{"_index":336,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:36",{"_index":338,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:45",{"_index":340,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:56",{"_index":335,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/users.module.ts",{"_index":355,"title":{},"body":{"modules/UsersModule.html":{}}}],["apps/backend/api/src/main.ts",{"_index":372,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["args",{"_index":575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["args.password",{"_index":578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["args.username",{"_index":577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arising",{"_index":542,"title":{},"body":{"license.html":{}}}],["associated",{"_index":489,"title":{},"body":{"license.html":{}}}],["ast",{"_index":570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ast.kind",{"_index":567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["async",{"_index":106,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":77,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.graphql",{"_index":104,"title":{},"body":{"classes/AuthResolver.html":{}}}],["auth/auth.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["authentication",{"_index":80,"title":{},"body":{"modules/AuthModule.html":{}}}],["authguard",{"_index":202,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["authguard('jwt",{"_index":204,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["authmodule",{"_index":37,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authors",{"_index":531,"title":{},"body":{"license.html":{}}}],["authresolver",{"_index":90,"title":{"classes/AuthResolver.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"coverage.html":{}}}],["authservice",{"_index":73,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autogenerate",{"_index":271,"title":{},"body":{"classes/UserEntity.html":{}}}],["await",{"_index":143,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["backend",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["backend/api",{"_index":28,"title":{},"body":{"controllers/AppController.html":{}}}],["base",{"_index":8,"title":{},"body":{"controllers/AppController.html":{}}}],["based",{"_index":464,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"dependencies.html":{}}}],["beta2",{"_index":422,"title":{},"body":{"dependencies.html":{}}}],["bootstrap",{"_index":374,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["bootstrap/ng",{"_index":402,"title":{},"body":{"dependencies.html":{}}}],["browse",{"_index":547,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":388,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["c",{"_index":477,"title":{},"body":{"license.html":{}}}],["candidate",{"_index":311,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["channel",{"_index":456,"title":{},"body":{"index.html":{}}}],["charge",{"_index":484,"title":{},"body":{"license.html":{}}}],["claim",{"_index":534,"title":{},"body":{"license.html":{}}}],["class",{"_index":27,"title":{"classes/AuthResolver.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["classes",{"_index":101,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"overview.html":{}}}],["client",{"_index":472,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":69,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":72,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":71,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":70,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":352,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":353,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":354,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":272,"title":{},"body":{"classes/UserEntity.html":{}}}],["column({length",{"_index":283,"title":{},"body":{"classes/UserEntity.html":{}}}],["column({nullable",{"_index":291,"title":{},"body":{"classes/UserEntity.html":{}}}],["compare",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{}}}],["compare(password",{"_index":257,"title":{},"body":{"injectables/PasswordService.html":{}}}],["comparehash",{"_index":237,"title":{},"body":{"injectables/PasswordService.html":{}}}],["comparehash(password",{"_index":239,"title":{},"body":{"injectables/PasswordService.html":{}}}],["conditions",{"_index":511,"title":{},"body":{"license.html":{}}}],["connection",{"_index":543,"title":{},"body":{"license.html":{}}}],["const",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":109,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":110,"title":{},"body":{"classes/AuthResolver.html":{}}}],["constructor(jwtservice",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(private",{"_index":141,"title":{},"body":{"classes/AuthResolver.html":{}}}],["constructor(userrepository",{"_index":330,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":303,"title":{},"body":{"classes/UserResolver.html":{}}}],["contain",{"_index":78,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["context",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["contract",{"_index":539,"title":{},"body":{"license.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{},"overview.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["copies",{"_index":505,"title":{},"body":{"license.html":{}}}],["copy",{"_index":487,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":476,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":358,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":326,"title":{},"body":{"injectables/UserService.html":{}}}],["created",{"_index":262,"title":{},"body":{"classes/UserEntity.html":{}}}],["createdatecolumn",{"_index":267,"title":{},"body":{"classes/UserEntity.html":{}}}],["createparamdecorator((data",{"_index":555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuser",{"_index":327,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(user",{"_index":333,"title":{},"body":{"injectables/UserService.html":{}}}],["creation",{"_index":269,"title":{},"body":{"classes/UserEntity.html":{}}}],["ctx",{"_index":205,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["ctx.getargs()[1",{"_index":576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.getcontext().req",{"_index":207,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["currentuser",{"_index":315,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["damages",{"_index":535,"title":{},"body":{"license.html":{}}}],["data",{"_index":128,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["database",{"_index":466,"title":{},"body":{"index.html":{}}}],["date",{"_index":270,"title":{},"body":{"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["date(ast.value",{"_index":569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(environment.jwt.expiresin).getdate",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["date(value",{"_index":565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db",{"_index":259,"title":{},"body":{"classes/UserEntity.html":{}}}],["deal",{"_index":491,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":544,"title":{},"body":{"license.html":{}}}],["decorators",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{}}}],["decorators/auth.decorator",{"_index":138,"title":{},"body":{"classes/AuthResolver.html":{}}}],["decorators/user.decorator",{"_index":316,"title":{},"body":{"classes/UserResolver.html":{}}}],["default",{"_index":247,"title":{},"body":{"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":34,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["development",{"_index":459,"title":{},"body":{"index.html":{}}}],["disable",{"_index":226,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["distribute",{"_index":501,"title":{},"body":{"license.html":{}}}],["docker",{"_index":469,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":359,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["dynamic",{"_index":389,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":274,"title":{},"body":{"classes/UserEntity.html":{}}}],["email",{"_index":263,"title":{},"body":{"classes/UserEntity.html":{}}}],["engine",{"_index":412,"title":{},"body":{"dependencies.html":{}}}],["entities",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["entities/user.entity",{"_index":317,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["entity",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserEntity.html":{},"modules/UsersModule.html":{}}}],["environment",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["environment.connection",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["environment.jwt.expiresin",{"_index":100,"title":{},"body":{"modules/AuthModule.html":{}}}],["environment.jwt.secret",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["environments/environment",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["eslint",{"_index":225,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eslint/no",{"_index":230,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["event",{"_index":530,"title":{},"body":{"license.html":{}}}],["execute",{"_index":103,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["executioncontext",{"_index":200,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["explicit",{"_index":231,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["export",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":82,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":400,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":203,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extract",{"_index":556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":217,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":222,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extracts",{"_index":579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["files",{"_index":490,"title":{},"body":{"license.html":{}}}],["find",{"_index":305,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["findonebyid",{"_index":328,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":337,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername",{"_index":329,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername(username",{"_index":339,"title":{},"body":{"injectables/UserService.html":{}}}],["fitness",{"_index":525,"title":{},"body":{"license.html":{}}}],["following",{"_index":510,"title":{},"body":{"license.html":{}}}],["format",{"_index":572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["free",{"_index":483,"title":{},"body":{"license.html":{}}}],["frontend",{"_index":471,"title":{},"body":{"index.html":{}}}],["function",{"_index":373,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":448,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":508,"title":{},"body":{"license.html":{}}}],["getdata",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["gethash",{"_index":238,"title":{},"body":{"injectables/PasswordService.html":{}}}],["gethash(password",{"_index":244,"title":{},"body":{"injectables/PasswordService.html":{}}}],["getrequest",{"_index":198,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["getrequest(context",{"_index":199,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["getting",{"_index":450,"title":{"index.html":{},"license.html":{}},"body":{}}],["gqlauthguard",{"_index":191,"title":{"injectables/GqlAuthGuard.html":{}},"body":{"injectables/GqlAuthGuard.html":{},"classes/UserResolver.html":{},"coverage.html":{}}}],["gqlexecutioncontext",{"_index":195,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["gqlexecutioncontext.create(context",{"_index":206,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["granted",{"_index":482,"title":{},"body":{"license.html":{}}}],["graphql",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"classes/UserResolver.html":{},"dependencies.html":{},"index.html":{}}}],["graphqljson",{"_index":573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["graphqlmodule",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlscalartype",{"_index":558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guard",{"_index":319,"title":{},"body":{"classes/UserResolver.html":{}}}],["guard.ts",{"_index":193,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"coverage.html":{}}}],["guard.ts:16",{"_index":201,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["guards/gql.auth",{"_index":318,"title":{},"body":{"classes/UserResolver.html":{}}}],["hash",{"_index":243,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hash(password",{"_index":255,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hereby",{"_index":481,"title":{},"body":{"license.html":{}}}],["holders",{"_index":532,"title":{},"body":{"license.html":{}}}],["https://github.com/kelektiv/node.bcrypt.js#readme",{"_index":254,"title":{},"body":{"injectables/PasswordService.html":{}}}],["id",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":282,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["ignoreexpiration",{"_index":223,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implement",{"_index":124,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["implements",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserEntity.html":{}}}],["implied",{"_index":521,"title":{},"body":{"license.html":{}}}],["import",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["included",{"_index":515,"title":{},"body":{"license.html":{}}}],["including",{"_index":494,"title":{},"body":{"license.html":{}}}],["incoming",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["infringement",{"_index":529,"title":{},"body":{"license.html":{}}}],["inject",{"_index":112,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":145,"title":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":341,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(userentity",{"_index":342,"title":{},"body":{"injectables/UserService.html":{}}}],["interaction",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["interfaces",{"_index":130,"title":{},"body":{"classes/AuthResolver.html":{}}}],["isignauthpayload",{"_index":121,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["isignauthresponse",{"_index":135,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["isvalid",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["iuser",{"_index":261,"title":{},"body":{"classes/UserEntity.html":{}}}],["json",{"_index":427,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt",{"_index":94,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":221,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":85,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":74,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kind",{"_index":520,"title":{},"body":{"license.html":{}}}],["kind.string",{"_index":568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["length",{"_index":298,"title":{},"body":{"classes/UserEntity.html":{}}}],["liability",{"_index":536,"title":{},"body":{"license.html":{}}}],["liable",{"_index":533,"title":{},"body":{"license.html":{}}}],["lib",{"_index":126,"title":{},"body":{"classes/AuthResolver.html":{}}}],["license",{"_index":474,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":495,"title":{},"body":{"license.html":{}}}],["limited",{"_index":522,"title":{},"body":{"license.html":{}}}],["line",{"_index":228,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["logic",{"_index":79,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["login",{"_index":107,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["login(signinpayload",{"_index":120,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["logout",{"_index":108,"title":{},"body":{"classes/AuthResolver.html":{}}}],["mail",{"_index":275,"title":{},"body":{"classes/UserEntity.html":{}}}],["matching",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":524,"title":{},"body":{"license.html":{}}}],["merge",{"_index":499,"title":{},"body":{"license.html":{}}}],["message",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["metadata",{"_index":434,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":447,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":475,"title":{},"body":{"license.html":{}}}],["modify",{"_index":498,"title":{},"body":{"license.html":{}}}],["module",{"_index":31,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":33,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mono",{"_index":461,"title":{},"body":{"index.html":{}}}],["name",{"_index":114,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["necessary",{"_index":276,"title":{},"body":{"classes/UserEntity.html":{}}}],["nestjs",{"_index":462,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":395,"title":{},"body":{"dependencies.html":{}}}],["nestjs/graphql",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"injectables/GqlAuthGuard.html":{},"classes/UserResolver.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":86,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":84,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":399,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["new",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":349,"title":{},"body":{"injectables/UserService.html":{}}}],["next",{"_index":227,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ng",{"_index":401,"title":{},"body":{"dependencies.html":{}}}],["ngrx/component",{"_index":404,"title":{},"body":{"dependencies.html":{}}}],["ngrx/effects",{"_index":407,"title":{},"body":{"dependencies.html":{}}}],["ngrx/entity",{"_index":408,"title":{},"body":{"dependencies.html":{}}}],["ngrx/router",{"_index":409,"title":{},"body":{"dependencies.html":{}}}],["ngrx/store",{"_index":410,"title":{},"body":{"dependencies.html":{}}}],["nguniversal/express",{"_index":411,"title":{},"body":{"dependencies.html":{}}}],["nickname",{"_index":264,"title":{},"body":{"classes/UserEntity.html":{}}}],["non",{"_index":528,"title":{},"body":{"license.html":{}}}],["notice",{"_index":513,"title":{},"body":{"license.html":{}}}],["nrwl/angular",{"_index":414,"title":{},"body":{"dependencies.html":{}}}],["null",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["nullable",{"_index":285,"title":{},"body":{"classes/UserEntity.html":{}}}],["number",{"_index":246,"title":{},"body":{"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["nx",{"_index":460,"title":{},"body":{"index.html":{}}}],["object",{"_index":557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":442,"title":{},"body":{"dependencies.html":{}}}],["obtaining",{"_index":486,"title":{},"body":{"license.html":{}}}],["open",{"_index":453,"title":{},"body":{"index.html":{}}}],["optional",{"_index":116,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["otherwise",{"_index":541,"title":{},"body":{"license.html":{}}}],["out",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":548,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":376,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":140,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["parameters",{"_index":113,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["parseliteral(ast",{"_index":566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parsevalue(value",{"_index":564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partial",{"_index":334,"title":{},"body":{"injectables/UserService.html":{}}}],["particular",{"_index":526,"title":{},"body":{"license.html":{}}}],["pass",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":210,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":83,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":219,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":220,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["password.service",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordhash",{"_index":240,"title":{},"body":{"injectables/PasswordService.html":{}}}],["passwordservice",{"_index":75,"title":{"injectables/PasswordService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"coverage.html":{},"overview.html":{}}}],["payload",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":232,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":233,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["permission",{"_index":480,"title":{},"body":{"license.html":{}}}],["permit",{"_index":506,"title":{},"body":{"license.html":{}}}],["person",{"_index":485,"title":{},"body":{"license.html":{}}}],["persons",{"_index":507,"title":{},"body":{"license.html":{}}}],["pg",{"_index":431,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":265,"title":{},"body":{"classes/UserEntity.html":{}}}],["plain",{"_index":242,"title":{},"body":{"injectables/PasswordService.html":{}}}],["playground",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["portions",{"_index":517,"title":{},"body":{"license.html":{}}}],["postgesql",{"_index":467,"title":{},"body":{"index.html":{}}}],["postgresql",{"_index":470,"title":{},"body":{"index.html":{}}}],["present",{"_index":287,"title":{},"body":{"classes/UserEntity.html":{}}}],["primarygeneratedcolumn",{"_index":280,"title":{},"body":{"classes/UserEntity.html":{}}}],["private",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["privatekey",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{}}}],["project",{"_index":454,"title":{},"body":{"index.html":{}}}],["promise",{"_index":131,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":235,"title":{},"body":{"injectables/PasswordService.html":{},"classes/UserEntity.html":{}}}],["provide",{"_index":212,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{}}}],["provided",{"_index":518,"title":{},"body":{"license.html":{}}}],["providers",{"_index":81,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":310,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["providing",{"_index":463,"title":{},"body":{"index.html":{}}}],["public",{"_index":289,"title":{},"body":{"classes/UserEntity.html":{}}}],["publish",{"_index":500,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":527,"title":{},"body":{"license.html":{}}}],["query",{"_index":105,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["query('login",{"_index":122,"title":{},"body":{"classes/AuthResolver.html":{}}}],["query('logout",{"_index":132,"title":{},"body":{"classes/AuthResolver.html":{}}}],["query('user",{"_index":321,"title":{},"body":{"classes/UserResolver.html":{}}}],["query('user')@useguards(gqlauthguard",{"_index":308,"title":{},"body":{"classes/UserResolver.html":{}}}],["readonly",{"_index":142,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["reflect",{"_index":433,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":331,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["req",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["request",{"_index":196,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["reset",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolve",{"_index":574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resolver",{"_index":134,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["resolver('auth",{"_index":139,"title":{},"body":{"classes/AuthResolver.html":{}}}],["resolver('user",{"_index":320,"title":{},"body":{"classes/UserResolver.html":{}}}],["resolvermap",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resolvers",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["resolvers/auth.resolver",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{}}}],["resolvers/user.resolver",{"_index":356,"title":{},"body":{"modules/UsersModule.html":{}}}],["restriction",{"_index":493,"title":{},"body":{"license.html":{}}}],["results",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["rights",{"_index":496,"title":{},"body":{"license.html":{}}}],["root",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["rounds",{"_index":252,"title":{},"body":{"injectables/PasswordService.html":{}}}],["rxjs",{"_index":436,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":251,"title":{},"body":{"injectables/PasswordService.html":{}}}],["saltrounds",{"_index":236,"title":{},"body":{"injectables/PasswordService.html":{}}}],["scalar",{"_index":560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["search",{"_index":312,"title":{},"body":{"classes/UserResolver.html":{}}}],["secretorkey",{"_index":224,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":253,"title":{},"body":{"injectables/PasswordService.html":{}}}],["sell",{"_index":504,"title":{},"body":{"license.html":{}}}],["send",{"_index":563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serialize(value",{"_index":561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server",{"_index":390,"title":{},"body":{"dependencies.html":{}}}],["services/auth.service",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{}}}],["services/jwt.strategy",{"_index":89,"title":{},"body":{"modules/AuthModule.html":{}}}],["services/password.service",{"_index":88,"title":{},"body":{"modules/AuthModule.html":{}}}],["services/user.service",{"_index":314,"title":{},"body":{"classes/UserResolver.html":{},"modules/UsersModule.html":{}}}],["set",{"_index":277,"title":{},"body":{"classes/UserEntity.html":{}}}],["shall",{"_index":514,"title":{},"body":{"license.html":{}}}],["shared",{"_index":127,"title":{},"body":{"classes/AuthResolver.html":{}}}],["showcasing",{"_index":457,"title":{},"body":{"index.html":{}}}],["signauthresponse",{"_index":119,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["signin",{"_index":137,"title":{},"body":{"classes/AuthResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signinpayload",{"_index":125,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["signinpayload.password",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinpayload.username",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{}}}],["software",{"_index":488,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["standard",{"_index":209,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["started",{"_index":451,"title":{"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":360,"title":{},"body":{"coverage.html":{}}}],["store",{"_index":405,"title":{},"body":{"dependencies.html":{}}}],["strategy",{"_index":218,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":509,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":502,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":516,"title":{},"body":{"license.html":{}}}],["super",{"_index":213,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":545,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":546,"title":{},"body":{"modules.html":{}}}],["svvs",{"_index":452,"title":{},"body":{"index.html":{}}}],["svvs/shared/utils/interfaces",{"_index":136,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserEntity.html":{}}}],["table",{"_index":260,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":375,"title":{},"body":{"coverage.html":{}}}],["technologies",{"_index":468,"title":{},"body":{"index.html":{}}}],["technology",{"_index":465,"title":{},"body":{"index.html":{}}}],["this.authservice.login(signinpayload",{"_index":144,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.jwtservice.sign(payload",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordservice.comparehash(pass",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.saltrounds",{"_index":256,"title":{},"body":{"injectables/PasswordService.html":{}}}],["this.userrepository.create(user",{"_index":350,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":343,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find({username",{"_index":345,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone(id",{"_index":344,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":351,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.findonebyid(user.id",{"_index":324,"title":{},"body":{"classes/UserResolver.html":{}}}],["this.userservice.findonebyusername(username",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validateuser",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["tools",{"_index":425,"title":{},"body":{"dependencies.html":{}}}],["tort",{"_index":540,"title":{},"body":{"license.html":{}}}],["translate",{"_index":194,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["true",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"classes/UserEntity.html":{}}}],["ts",{"_index":443,"title":{},"body":{"dependencies.html":{}}}],["tslib",{"_index":438,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":115,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":297,"title":{},"body":{"classes/UserEntity.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":357,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["typepaths",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":229,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["unauthorizedexception",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["unique",{"_index":278,"title":{},"body":{"classes/UserEntity.html":{}}}],["unknown",{"_index":216,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/UserResolver.html":{},"miscellaneous/variables.html":{}}}],["update",{"_index":295,"title":{},"body":{"classes/UserEntity.html":{}}}],["updated",{"_index":266,"title":{},"body":{"classes/UserEntity.html":{}}}],["updatedatecolumn",{"_index":293,"title":{},"body":{"classes/UserEntity.html":{}}}],["use",{"_index":497,"title":{},"body":{"license.html":{}}}],["used",{"_index":288,"title":{},"body":{"classes/UserEntity.html":{},"index.html":{}}}],["useguard",{"_index":197,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["useguards",{"_index":313,"title":{},"body":{"classes/UserResolver.html":{}}}],["useguards(gqlauthguard",{"_index":322,"title":{},"body":{"classes/UserResolver.html":{}}}],["user",{"_index":118,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["user.entity.ts",{"_index":279,"title":{},"body":{"classes/UserEntity.html":{}}}],["user.id",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["userentity",{"_index":53,"title":{"classes/UserEntity.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userid",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["username",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":306,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["userresolver",{"_index":299,"title":{"classes/UserResolver.html":{}},"body":{"classes/UserResolver.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["users",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["users.graphql",{"_index":301,"title":{},"body":{"classes/UserResolver.html":{}}}],["users.length",{"_index":346,"title":{},"body":{"injectables/UserService.html":{}}}],["users/entities/user.entity",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["users/services/user.service",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["users/users.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users[0",{"_index":348,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":151,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":38,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["validate",{"_index":117,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":214,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["value",{"_index":248,"title":{},"body":{"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["value.toisostring",{"_index":562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":364,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":551,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vladirr",{"_index":479,"title":{},"body":{"license.html":{}}}],["warranties",{"_index":523,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":519,"title":{},"body":{"license.html":{}}}],["welcome",{"_index":20,"title":{},"body":{"controllers/AppController.html":{}}}],["whether",{"_index":537,"title":{},"body":{"license.html":{}}}],["whoami",{"_index":302,"title":{},"body":{"classes/UserResolver.html":{}}}],["whoami(@currentuser",{"_index":323,"title":{},"body":{"classes/UserResolver.html":{}}}],["whoami(user",{"_index":307,"title":{},"body":{"classes/UserResolver.html":{}}}],["without",{"_index":492,"title":{},"body":{"license.html":{}}}],["youtube",{"_index":455,"title":{},"body":{"index.html":{}}}],["zen",{"_index":441,"title":{},"body":{"dependencies.html":{}}}],["zone.js",{"_index":445,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Base controller backend-api app\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/app.controller.ts:13\n                \n            \n\n\n            \n                \n                    Return welcome string\n\n\n                    \n                        Returns :     { message: string; }\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {Controller, Get} from '@nestjs/common'\n\n\n/**\n * Base controller backend-api app\n */\n@Controller()\nexport class AppController {\n  /**\n   * Return welcome string\n   */\n  @Get()\n  getData() {\n    return {message: 'Welcome to backend/api!'}\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Root module backend-api app\n\n        \n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {Module} from '@nestjs/common'\nimport {TypeOrmModule} from '@nestjs/typeorm'\nimport {GraphQLModule} from '@nestjs/graphql'\n\nimport {environment} from '../environments/environment'\nimport {AuthModule} from './auth/auth.module'\nimport {UsersModule} from './users/users.module'\nimport {UserEntity} from './users/entities/user.entity'\nimport {resolverMap} from './app.resolver'\nimport {AppController} from './app.controller'\n\n/**\n * Root module backend-api app\n */\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      ...environment.connection,\n      entities: [UserEntity],\n    }),\n    GraphQLModule.forRoot({\n      typePaths: ['./**/*.graphql'],\n      context: ({req}) => ({req}),\n      playground: true,\n      resolvers: [resolverMap],\n    }),\n    UsersModule,\n    AuthModule,\n  ],\n  controllers: [AppController],\n})\nexport class AppModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/auth.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Auth module contain logic of authentication\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            PasswordService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {Module} from '@nestjs/common'\nimport {PassportModule} from '@nestjs/passport'\nimport {JwtModule} from '@nestjs/jwt'\n\nimport {environment} from '../../environments/environment'\n\nimport {UsersModule} from '../users/users.module'\nimport {AuthService} from './services/auth.service'\nimport {PasswordService} from './services/password.service'\nimport {JwtStrategy} from './services/jwt.strategy'\nimport {AuthResolver} from './resolvers/auth.resolver'\n\n/**\n * Auth module contain logic of authentication\n */\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule.register({\n      defaultStrategy: 'jwt',\n    }),\n    JwtModule.register({\n      privateKey: environment.jwt.secret,\n      signOptions: {\n        expiresIn: environment.jwt.expiresIn,\n      },\n    }),\n  ],\n  providers: [AuthService, PasswordService, JwtStrategy, AuthResolver],\n  exports: [AuthService, PassportModule],\n})\nexport class AuthModule {\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthResolver.html":{"url":"classes/AuthResolver.html","title":"class - AuthResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/resolvers/auth.resolver.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthResolver execute auth.graphql query\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:15\n                            \n                        \n\n                \n                    \n                            Inject into AuthResolver: AuthService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                validate user and return SignAuthResponse\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(signInPayload: ISignAuthPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('login')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:29\n                \n            \n\n\n            \n                \n                    Implement GraphQL Query 'login'\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    signInPayload\n                                    \n                                            ISignAuthPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        from lib shared-data-access-interfaces\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('logout')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:39\n                \n            \n\n\n            \n                \n                    Implement GraphQL Query 'logout'\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query, Resolver } from '@nestjs/graphql';\n\nimport type {\n  ISignAuthPayload,\n  ISignAuthResponse,\n} from '@svvs/shared/utils/interfaces';\n\nimport { SignIn } from '../decorators/auth.decorator';\nimport { AuthService } from '../services/auth.service';\n\n/**\n * AuthResolver execute auth.graphql query\n */\n@Resolver('Auth')\nexport class AuthResolver {\n  /**\n   * Inject into AuthResolver: AuthService\n   *\n   * @param authService validate user and return SignAuthResponse\n   */\n  constructor(private readonly authService: AuthService) {}\n\n  /**\n   * Implement GraphQL Query 'login'\n   *\n   * @param signInPayload from lib shared-data-access-interfaces\n   */\n  @Query('login')\n  async login(\n    @SignIn() signInPayload: ISignAuthPayload\n  ): Promise {\n    return await this.authService.login(signInPayload);\n  }\n\n  /**\n   * Implement GraphQL Query 'logout'\n   */\n  @Query('logout')\n  async logout(): Promise {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This AuthService validate user and return SignAuthResponse\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, userService: UserService, passwordService: PasswordService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/auth/services/auth.service.ts:18\n                            \n                        \n\n                \n                    \n                            Inject into AuthService: JwtService, UserService, PasswordService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Implements interaction with JWT\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Implements interaction with the user entity\n\n                                                        \n                                                \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Implements interaction with bcrypt and compare password\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(signInPayload: ISignAuthPayload)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/auth.service.ts:61\n                \n            \n\n\n            \n                \n                    Return SignAuthResponse data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    signInPayload\n                                    \n                                            ISignAuthPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Incoming login data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/auth.service.ts:38\n                \n            \n\n\n            \n                \n                    Validate users\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\nimport {\n  ISignAuthPayload,\n  ISignAuthResponse,\n} from '@svvs/shared/utils/interfaces';\nimport { environment } from '../../../environments/environment';\n\nimport { UserService } from '../../users/services/user.service';\nimport { PasswordService } from './password.service';\nimport { UserEntity } from '../../users/entities/user.entity';\n\n/**\n * This AuthService validate user and return SignAuthResponse\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Inject into AuthService: JwtService, UserService, PasswordService\n   *\n   * @param jwtService Implements interaction with JWT\n   * @param userService Implements interaction with the user entity\n   * @param passwordService Implements interaction with bcrypt and compare password\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly userService: UserService,\n    private readonly passwordService: PasswordService\n  ) {}\n\n  /**\n   * Validate users\n   *\n   * @param username\n   * @param pass\n   */\n  async validateUser(\n    username: string,\n    pass: string\n  ): Promise> {\n    const user = await this.userService.findOneByUserName(username);\n\n    const isValid = user\n      ? await this.passwordService.compareHash(pass, user.password)\n      : false;\n\n    if (isValid) {\n      delete user.password;\n\n      return user;\n    }\n    return null;\n  }\n\n  /**\n   * Return SignAuthResponse data\n   *\n   * @param signInPayload Incoming login data\n   */\n  async login(signInPayload: ISignAuthPayload): Promise {\n    const user = await this.validateUser(\n      signInPayload.username,\n      signInPayload.password\n    );\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    const payload = { username: user.username, userId: user.id };\n\n    return {\n      accessToken: this.jwtService.sign(payload),\n      expiresIn: new Date(environment.jwt.expiresIn).getDate(),\n      id: user.id,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GqlAuthGuard.html":{"url":"injectables/GqlAuthGuard.html","title":"injectable - GqlAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GqlAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/guards/gql.auth-guard.ts\n        \n\n\n            \n                Description\n            \n            \n                GqlAuthGuard translate GqlExecutionContext request => UseGuard\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRequest\n                        \n                    \n                \n            \n            \n                \ngetRequest(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/guards/gql.auth-guard.ts:16\n                \n            \n\n\n            \n                \n                    getRequest return ExecutionContext as GqlExecutionContext request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {ExecutionContext, Injectable} from '@nestjs/common'\nimport {GqlExecutionContext} from '@nestjs/graphql'\nimport {AuthGuard} from '@nestjs/passport'\n\n/**\n * GqlAuthGuard translate GqlExecutionContext request => UseGuard\n *\n */\n@Injectable()\nexport class GqlAuthGuard extends AuthGuard('jwt') {\n  /**\n   * getRequest return ExecutionContext as GqlExecutionContext request\n   *\n   * @param context\n   */\n  getRequest(context: ExecutionContext) {\n    const ctx = GqlExecutionContext.create(context)\n\n    return ctx.getContext().req\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/services/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Implements interaction with standard passport-jwt methods\nand return validate data\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/auth/services/jwt.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            provide super\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/jwt.strategy.ts:29\n                \n            \n\n\n            \n                \n                    Return validate data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@nestjs/common'\nimport {ExtractJwt, Strategy} from 'passport-jwt'\nimport {PassportStrategy} from '@nestjs/passport'\n\nimport {environment} from '../../../environments/environment'\n\n/**\n * Implements interaction with standard passport-jwt methods\n * and return validate data\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * provide super\n   */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: environment.jwt.secret,\n    })\n  }\n\n  /**\n   * Return validate data\n   * @param payload\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async validate(payload: any) {\n    return {userId: payload.sub, username: payload.username}\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PasswordService.html":{"url":"injectables/PasswordService.html","title":"injectable - PasswordService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PasswordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/services/password.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Provide methods bcrypt and compare password\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                saltRounds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                compareHash\n                            \n                            \n                                getHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        compareHash\n                        \n                    \n                \n            \n            \n                \ncompareHash(password: string, passwordHash: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/password.service.ts:28\n                \n            \n\n\n            \n                \n                    Compare plain password with password hash\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Plain password\n\n                                    \n                                \n                                \n                                    passwordHash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Password hash\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHash\n                        \n                    \n                \n            \n            \n                \ngetHash(password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/password.service.ts:19\n                \n            \n\n\n            \n                \n                    Return hash\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Plain password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        saltRounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/auth/services/password.service.ts:13\n                        \n                    \n\n            \n                \n                    Salt rounds\nSee https://github.com/kelektiv/node.bcrypt.js#readme\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@nestjs/common'\nimport {compare, hash} from 'bcrypt'\n\n/**\n * Provide methods bcrypt and compare password\n */\n@Injectable()\nexport class PasswordService {\n  /**\n   * Salt rounds\n   * @see https://github.com/kelektiv/node.bcrypt.js#readme\n   */\n  private saltRounds = 10\n\n  /**\n   * Return hash\n   * @param password Plain password\n   */\n  getHash(password: string): Promise {\n    return hash(password, this.saltRounds)\n  }\n\n  /**\n   * Compare plain password with password hash\n   * @param password Plain password\n   * @param passwordHash Password hash\n   */\n  compareHash(password: string, passwordHash: string): Promise {\n    return compare(password, passwordHash)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity users provide access to db table users\n\n            \n\n\n            \n                Implements\n            \n            \n                        IUser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                nickname\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                            \n                                updated\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/entities/user.entity.ts:28\n                        \n                    \n\n            \n                \n                    User creation date (autogenerate)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/entities/user.entity.ts:43\n                        \n                    \n\n            \n                \n                    User e-mail\nif necessary - set the value {unique: true} in user.entity.ts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/entities/user.entity.ts:22\n                        \n                    \n\n            \n                \n                    User ID unique identifier (autogenerate)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nickname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 50, unique: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/entities/user.entity.ts:75\n                        \n                    \n\n            \n                \n                    User nickname (optional)\nIf present used as public username\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/entities/user.entity.ts:55\n                        \n                    \n\n            \n                \n                    User password\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/entities/user.entity.ts:49\n                        \n                    \n\n            \n                \n                    User phone (optional)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/entities/user.entity.ts:34\n                        \n                    \n\n            \n                \n                    User update date (autogenerate)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 50, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/entities/user.entity.ts:65\n                        \n                    \n\n            \n                \n                    Username {unique}\nUsed as default username\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nimport type { IUser } from '@svvs/shared/utils/interfaces';\n\n/**\n * Entity users provide access to db table users\n */\n@Entity({\n  name: 'users',\n})\nexport class UserEntity implements IUser {\n  /**\n   * User ID unique identifier (autogenerate)\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * User creation date (autogenerate)\n   */\n  @CreateDateColumn()\n  created: string;\n\n  /**\n   * User update date (autogenerate)\n   */\n  @UpdateDateColumn()\n  updated: string;\n\n  /**\n   * User e-mail\n   *\n   * if necessary - set the value {unique: true} in user.entity.ts\n   *\n   */\n  @Column()\n  email: string;\n\n  /**\n   * User phone (optional)\n   */\n  @Column({ nullable: true })\n  phone: string;\n\n  /**\n   * User password\n   */\n  @Column()\n  password: string;\n\n  /**\n   * Username {unique}\n   *\n   * @description\n   *\n   * Used as default username\n   */\n  @Column({ length: 50, unique: true })\n  username: string;\n\n  /**\n   * User nickname (optional)\n   *\n   * @description\n   *\n   * If present used as public username\n   */\n  @Column({ length: 50, unique: true, nullable: true })\n  nickname: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResolver.html":{"url":"classes/UserResolver.html","title":"class - UserResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/resolvers/user.resolver.ts\n        \n\n\n            \n                Description\n            \n            \n                UserResolver execute users.graphql query\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                whoAmI\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/users/resolvers/user.resolver.ts:13\n                            \n                        \n\n                \n                    \n                            Inject into UserResolver: UserService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                find user from userRepository\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        whoAmI\n                        \n                    \n                \n            \n            \n                \n                    \n                    whoAmI(user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('user')@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/users/resolvers/user.resolver.ts:31\n                \n            \n\n\n            \n                \n                    Implement GraphQL Query 'user'\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        provides the user as a candidate for search in userRepository\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {Query, Resolver} from '@nestjs/graphql'\nimport {UseGuards} from '@nestjs/common'\n\nimport {UserService} from '../services/user.service'\nimport {CurrentUser} from '../decorators/user.decorator'\nimport {UserEntity} from '../entities/user.entity'\nimport {GqlAuthGuard} from '../guards/gql.auth-guard'\n\n/**\n * UserResolver execute users.graphql query\n */\n@Resolver('User')\nexport class UserResolver {\n  /**\n   * Inject into UserResolver: UserService\n   *\n   * @param userService find user from userRepository\n   */\n  constructor(\n    private readonly userService: UserService,\n  ) {\n  }\n\n  /**\n   * Implement GraphQL Query 'user'\n   *\n   * @param user provides the user as a candidate for search in userRepository\n   */\n  @Query('user')\n  @UseGuards(GqlAuthGuard)\n  async whoAmI(@CurrentUser() user: UserEntity) {\n    return await this.userService.findOneById(user.id)\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/services/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                UserService find or create user from userRepository\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByUserName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/users/services/user.service.ts:12\n                            \n                        \n\n                \n                    \n                            Inject into UserService: userRepository\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:56\n                \n            \n\n\n            \n                \n                    Create new user into userRepository\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        provides candidate of new user into userRepository\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find()\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:27\n                \n            \n\n\n            \n                \n                    Find all users from userRepository\n\n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:36\n                \n            \n\n\n            \n                \n                    Find user by id from userRepository\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUserName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUserName(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:45\n                \n            \n\n\n            \n                \n                    Find user by username from userRepository\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@nestjs/common'\nimport {InjectRepository} from '@nestjs/typeorm'\nimport {Repository} from 'typeorm'\n\nimport {UserEntity} from '../entities/user.entity'\n\n\n/**\n * UserService find or create user from userRepository\n */\n@Injectable()\nexport class UserService {\n  /**\n   * Inject into UserService: userRepository\n   *\n   * @param userRepository\n   */\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n  ) {\n  }\n\n  /**\n   * Find all users from userRepository\n   */\n  async find(): Promise {\n    return await this.userRepository.find()\n  }\n\n  /**\n   * Find user by id from userRepository\n   *\n   * @param id\n   */\n  async findOneById(id: number): Promise {\n    return await (this.userRepository.findOne(id)) || null\n  }\n\n  /**\n   * Find user by username from userRepository\n   *\n   * @param username\n   */\n  async findOneByUserName(username: string): Promise {\n    const users = await this.userRepository.find({username})\n\n    return users.length === 1 ? users[0] : null\n  }\n\n  /**\n   * Create new user into userRepository\n   *\n   * @param user provides candidate of new user into userRepository\n   */\n  async createUser(user: Partial): Promise {\n    const newUser = await this.userRepository.create(user)\n\n    return this.userRepository.save(newUser)\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/users/users.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            User module contain logic user entity\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {Module} from '@nestjs/common'\nimport {TypeOrmModule} from '@nestjs/typeorm'\n\nimport {UserService} from './services/user.service'\nimport {UserEntity} from './entities/user.entity'\nimport {UserResolver} from './resolvers/user.resolver'\n\n/**\n * User module contain logic user entity\n */\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserEntity]),\n  ],\n  providers: [UserService, UserResolver],\n  exports: [UserService],\n})\nexport class UsersModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/backend/api/src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/app.resolver.ts\n            \n            variable\n            resolverMap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/decorators/auth.decorator.ts\n            \n            variable\n            SignIn\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/resolvers/auth.resolver.ts\n            \n            class\n            AuthResolver\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/services/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/services/password.service.ts\n            \n            injectable\n            PasswordService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/decorators/user.decorator.ts\n            \n            variable\n            CurrentUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/guards/gql.auth-guard.ts\n            \n            injectable\n            GqlAuthGuard\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/resolvers/user.resolver.ts\n            \n            class\n            UserResolver\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                apps/backend/api/src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : 12.2.9\n        \n            @angular/cdk : 12.2.9\n        \n            @angular/common : 12.2.9\n        \n            @angular/compiler : 12.2.9\n        \n            @angular/core : 12.2.9\n        \n            @angular/forms : 12.2.9\n        \n            @angular/localize : ^11.0.0\n        \n            @angular/material : 12.2.9\n        \n            @angular/platform-browser : 12.2.9\n        \n            @angular/platform-browser-dynamic : 12.2.9\n        \n            @angular/platform-server : 12.2.9\n        \n            @angular/router : 12.2.9\n        \n            @apollo/client : ^3.3.12\n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/graphql : ^7.9.10\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            @ng-bootstrap/ng-bootstrap : ^9.0.2\n        \n            @ngrx/component-store : 12.4.0\n        \n            @ngrx/effects : 12.4.0\n        \n            @ngrx/entity : 12.4.0\n        \n            @ngrx/router-store : 12.4.0\n        \n            @ngrx/store : 12.4.0\n        \n            @nguniversal/express-engine : ^11.2.1\n        \n            @nrwl/angular : 12.10.0\n        \n            apollo-angular : ^2.4.0\n        \n            apollo-server-express : ^2.21.0\n        \n            bcrypt : ^5.0.1\n        \n            bootstrap : ^5.0.0-beta2\n        \n            express : ^4.15.2\n        \n            graphql : ^15.5.0\n        \n            graphql-tools : ^7.0.4\n        \n            graphql-type-json : ^0.3.2\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.5.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ~6.6.3\n        \n            tslib : ^2.0.0\n        \n            typeorm : ^0.2.31\n        \n            zen-observable-ts : ^1.0.0\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/backend/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Bootstrap backend-api app\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\n\n\n\n\nSVVS is an open source project and YouTube channel showcasing application development in the Nx mono repository.\n\nBackend-api\nIt a NestJS application providing\n\nAPI based on GraphQL technology \ninteraction database PostgeSQL\n\n\nTechnologies used\nNx\n• NestJs\n• GraphQL\n• Docker\n• PostgreSQL\nDocumentation\nbackend-api\n• frontend-client\n• frontend-admin\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2021 VladiRR\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CurrentUser   (apps/.../user.decorator.ts)\n                        \n                        \n                            resolverMap   (apps/.../app.resolver.ts)\n                        \n                        \n                            SignIn   (apps/.../auth.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/backend/api/src/app/users/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((data: unknown, ctx: ExecutionContext) => {\n  return ctx\n})\n                    \n                \n\n            \n                \n                    Extract context from ExecutionContext\n\n                \n            \n\n        \n    \n\n    apps/backend/api/src/app/app.resolver.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        resolverMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  Date: new GraphQLScalarType({\n    name: 'Date',\n    description: 'Date custom scalar type',\n    serialize(value: Date) {\n      return value.toISOString() // Value send to the client\n    },\n    parseValue(value: string) {\n      return new Date(value) // Value from the client\n    },\n    parseLiteral(ast) {\n      if (ast.kind === Kind.STRING) {\n        return new Date(ast.value) // ast value is always in string format\n      }\n      return null\n    },\n  }),\n  JSON: GraphQLJSON,\n}\n                    \n                \n\n            \n                \n                    Resolve scalar type Date & JSON\n\n                \n            \n\n        \n    \n\n    apps/backend/api/src/app/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SignIn\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((data: unknown, ctx: ExecutionContext) => {\n  const args = ctx.getArgs()[1]\n\n  return {username: args.username, password: args.password}\n})\n                    \n                \n\n            \n                \n                    extracts username and password from ExecutionContext\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
